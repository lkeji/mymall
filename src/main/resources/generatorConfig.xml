<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <properties resource="generator.properties"/>
    <context id="MySqlContext" targetRuntime="MyBatis3" defaultModelType="flat">
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 为模型生成序列化方法-->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        <!-- 为生成的Java模型创建一个toString方法 -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>
        <!--生成mapper.xml时覆盖原文件-->
        <plugin type="org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin" />
        <!--可以自定义生成model的代码注释-->
        <commentGenerator type="com.learn.mymall.common.CommentGenerator">
            <!-- 是否取消注释 -->
            <property name="suppressAllComments" value="true"/>
            <!-- 是否生成注释代时间戳-->
            <property name="suppressDate" value="true"/>
            <property name="addRemarkComments" value="true"/>
        </commentGenerator>
        <!--配置数据库连接-->
        <jdbcConnection driverClass="${jdbc.driverClass}"
                        connectionURL="${jdbc.connectionURL}"
                        userId="${jdbc.userId}"
                        password="${jdbc.password}">
            <!--解决mysql驱动升级到8.0后不生成指定数据库代码的问题-->
            <property name="nullCatalogMeansCurrent" value="true" />
        </jdbcConnection>
        <!--生成Model类存放位置 -->
        <javaModelGenerator targetPackage="com.learn.mymall.entity"
                            targetProject="src/main/java">
<!--            &lt;!&ndash; 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false &ndash;&gt;
            <property name="enableSubPackages" value="true" />
            &lt;!&ndash; 设置是否在getter方法中，对String类型字段调用trim()方法 &ndash;&gt;
            <property name="trimStrings" value="true" />
            &lt;!&ndash; for MyBatis3/MyBatis3Simple 自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter； &ndash;&gt;
            <property name="constructorBased" value="false" />
            &lt;!&ndash; for MyBatis3/MyBatis3Simple 是否创建一个不可变的类，如果为true， 那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类 &ndash;&gt;
            <property name="immutable" value="false" />-->
        </javaModelGenerator>
        <!--生成映射文件存放位置 -->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources"/>
        <!--指定生成mapper.xml的路径,就是Dao -->
        <javaClientGenerator type="XMLMAPPER"
                             targetPackage="com.learn.mymall.mapper" targetProject="src/main/java"/>
   <!--     &lt;!&ndash;品牌信息表&ndash;&gt;
        <table tableName="pms_brand" >
            &lt;!&ndash; 需要插入时返回主键值，请将此属性打开，column值为主键的列明 &ndash;&gt;
            <generatedKey column="id" sqlStatement="MySql" identity="true" />
        </table>
        &lt;!&ndash;后台用户表&ndash;&gt;
        <table tableName="ums_admin" >
            &lt;!&ndash; 需要插入时返回主键值，请将此属性打开，column值为主键的列明 &ndash;&gt;
            <generatedKey column="id" sqlStatement="MySql" identity="true" />
        </table>-->



        <!--后台用户角色表-->
        <table tableName="ums_role">
            <generatedKey column="id" sqlStatement="MySql" identity="true"/>
        </table>
        <!--后台用户权限表-->
        <table tableName="ums_permission">
            <generatedKey column="id" sqlStatement="MySql" identity="true"/>
        </table>
        <table tableName="ums_admin_role_relation">
            <generatedKey column="id" sqlStatement="MySql" identity="true"/>
        </table>
        <table tableName="ums_role_permission_relation">
            <generatedKey column="id" sqlStatement="MySql" identity="true"/>
        </table>
        <table tableName="ums_admin_permission_relation">
            <generatedKey column="id" sqlStatement="MySql" identity="true"/>
        </table>

    </context>
</generatorConfiguration>